equo {
    channel = "rls"
    space = "equo-monaco-editor"
}

task uploadMetadata(type: com.make.equo.UploadMetadataTask) {
}

task publish(type: com.make.equo.UploadRepoTask, dependsOn: [uploadMetadata]) {
}

task publishP2(type: com.make.equo.UploadRepoTask) {
    source = file("./cnf/p2repo")
    prefix = "rls/p2/"
}

allprojects {
    apply plugin: "java"
    apply plugin: "jacoco"

    repositories {
        jcenter()
    }

    jacoco {
        toolVersion = '0.8.6'
    }
}


def enabledHtml = hasProperty('reportHtml') ? reportHtml : "false"

/* Additional configuration for the Bnd projects */
subprojects {
  if (plugins.hasPlugin('biz.aQute.bnd')) {
    // additional configuration for Bnd projects
  }

  //jacoco configuration for every subproyect
  jacocoTestReport {
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories =  files(sourceSets.main.output)
        reports {
            html.enabled = false
            xml.enabled = false
            csv.enabled = false
        }
    }
}

//taks to build jacoco report with results of all subprojects
task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    //dependsOn = subprojects.test
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = Boolean.valueOf(enabledHtml)
        xml.enabled = false
        csv.enabled = true
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}
